"use strict";

var _distance_in_words_to_now = _interopRequireDefault(require("date-fns/distance_in_words_to_now"));

var _add_seconds = _interopRequireDefault(require("date-fns/add_seconds"));

var _throttleDebounce = require("throttle-debounce");

var _bytes = _interopRequireDefault(require("bytes"));

var _events = _interopRequireDefault(require("events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function () { function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); } return _getPrototypeOf; }(); return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function () { function _setPrototypeOf(o, p) { o.__proto__ = p; return o; } return _setPrototypeOf; }(); return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var Progress =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Progress, _EventEmitter);

  function Progress(response, options) {
    var _this;

    _classCallCheck(this, Progress);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Progress).call(this));
    _this.options = options || {};
    _this.total = Number(response.headers.get('content-length'));
    _this.done = 0;
    _this.startedAt = Date.now();
    var throttled = (0, _throttleDebounce.throttle)(_this.options.throttle || 0, _this.onProgress.bind(_assertThisInitialized(_assertThisInitialized(_this))));
    response.body.on('data', function (chunk) {
      _this.done += chunk.length;
      return throttled();
    });
    response.body.on('end', function () {
      _this.onProgress();

      _this.emit('finish');
    });
    return _this;
  }

  _createClass(Progress, [{
    key: "onProgress",
    value: function () {
      function onProgress() {
        var totalh = (0, _bytes["default"])(this.total);
        var doneh = (0, _bytes["default"])(this.done);
        var elapsed = (Date.now() - this.startedAt) / 1000;
        var rate = this.done / elapsed;
        var rateh = "".concat((0, _bytes["default"])(rate), "/s");
        var estimated = this.total / rate;
        var progress = this.done / this.total;
        var eta = estimated - elapsed;
        var etaDate = (0, _add_seconds["default"])(new Date(), eta);
        var etah = (0, _distance_in_words_to_now["default"])(etaDate, {
          includeSeconds: true
        });
        this.emit('progress', {
          total: this.total,
          done: this.done,
          totalh: totalh,
          doneh: doneh,
          startedAt: this.startedAt,
          elapsed: elapsed,
          rate: rate,
          rateh: rateh,
          estimated: estimated,
          progress: progress,
          eta: eta,
          etah: etah,
          etaDate: etaDate
        });
      }

      return onProgress;
    }()
  }]);

  return Progress;
}(_events["default"]);

module.exports = Progress;